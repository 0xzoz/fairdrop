/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface IMerkleDistributorInterface extends ethers.utils.Interface {
  functions: {
    'claim(uint256,address,uint256,bytes32[])': FunctionFragment;
    'expireTimestamp()': FunctionFragment;
    'isClaimed(uint256)': FunctionFragment;
    'merkleRoot()': FunctionFragment;
    'sweep(address)': FunctionFragment;
    'token()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'claim',
    values: [BigNumberish, string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'expireTimestamp',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isClaimed',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'merkleRoot',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'sweep', values: [string]): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'expireTimestamp',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'isClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'merkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sweep', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;

  events: {
    'Claimed(uint256,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment;
}

export class IMerkleDistributor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMerkleDistributorInterface;

  functions: {
    claim(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'claim(uint256,address,uint256,bytes32[])'(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expireTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    'expireTimestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    isClaimed(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    'isClaimed(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    'merkleRoot()'(overrides?: CallOverrides): Promise<[string]>;

    sweep(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'sweep(address)'(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    'token()'(overrides?: CallOverrides): Promise<[string]>;
  };

  claim(
    index: BigNumberish,
    account: string,
    amount: BigNumberish,
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'claim(uint256,address,uint256,bytes32[])'(
    index: BigNumberish,
    account: string,
    amount: BigNumberish,
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expireTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  'expireTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

  isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  'isClaimed(uint256)'(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  'merkleRoot()'(overrides?: CallOverrides): Promise<string>;

  sweep(
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'sweep(address)'(
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  'token()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claim(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    'claim(uint256,address,uint256,bytes32[])'(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    expireTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    'expireTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    'isClaimed(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    'merkleRoot()'(overrides?: CallOverrides): Promise<string>;

    sweep(target: string, overrides?: CallOverrides): Promise<void>;

    'sweep(address)'(target: string, overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    'token()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Claimed(
      claimIndex: BigNumberish | null,
      account: string | null,
      amount: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { claimIndex: BigNumber; account: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    claim(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'claim(uint256,address,uint256,bytes32[])'(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expireTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    'expireTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'isClaimed(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    'merkleRoot()'(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'sweep(address)'(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    'token()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'claim(uint256,address,uint256,bytes32[])'(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expireTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'expireTimestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimed(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'isClaimed(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'merkleRoot()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweep(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'sweep(address)'(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'token()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
